// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StreamRequestBody struct {
	MessageId            int64    `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	ReceiverId           int64    `protobuf:"varint,2,opt,name=ReceiverId,proto3" json:"ReceiverId,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamRequestBody) Reset()         { *m = StreamRequestBody{} }
func (m *StreamRequestBody) String() string { return proto.CompactTextString(m) }
func (*StreamRequestBody) ProtoMessage()    {}
func (*StreamRequestBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *StreamRequestBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequestBody.Unmarshal(m, b)
}
func (m *StreamRequestBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequestBody.Marshal(b, m, deterministic)
}
func (m *StreamRequestBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequestBody.Merge(m, src)
}
func (m *StreamRequestBody) XXX_Size() int {
	return xxx_messageInfo_StreamRequestBody.Size(m)
}
func (m *StreamRequestBody) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequestBody.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequestBody proto.InternalMessageInfo

func (m *StreamRequestBody) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *StreamRequestBody) GetReceiverId() int64 {
	if m != nil {
		return m.ReceiverId
	}
	return 0
}

func (m *StreamRequestBody) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StreamRequest struct {
	MessageType          int64              `protobuf:"varint,1,opt,name=messageType,proto3" json:"messageType,omitempty"`
	Body                 *StreamRequestBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StreamRequest) Reset()         { *m = StreamRequest{} }
func (m *StreamRequest) String() string { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()    {}
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}

func (m *StreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamRequest.Unmarshal(m, b)
}
func (m *StreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamRequest.Marshal(b, m, deterministic)
}
func (m *StreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamRequest.Merge(m, src)
}
func (m *StreamRequest) XXX_Size() int {
	return xxx_messageInfo_StreamRequest.Size(m)
}
func (m *StreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamRequest proto.InternalMessageInfo

func (m *StreamRequest) GetMessageType() int64 {
	if m != nil {
		return m.MessageType
	}
	return 0
}

func (m *StreamRequest) GetBody() *StreamRequestBody {
	if m != nil {
		return m.Body
	}
	return nil
}

type StreamReply struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamReply) Reset()         { *m = StreamReply{} }
func (m *StreamReply) String() string { return proto.CompactTextString(m) }
func (*StreamReply) ProtoMessage()    {}
func (*StreamReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{2}
}

func (m *StreamReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamReply.Unmarshal(m, b)
}
func (m *StreamReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamReply.Marshal(b, m, deterministic)
}
func (m *StreamReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamReply.Merge(m, src)
}
func (m *StreamReply) XXX_Size() int {
	return xxx_messageInfo_StreamReply.Size(m)
}
func (m *StreamReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamReply.DiscardUnknown(m)
}

var xxx_messageInfo_StreamReply proto.InternalMessageInfo

func (m *StreamReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*StreamRequestBody)(nil), "stream.StreamRequestBody")
	proto.RegisterType((*StreamRequest)(nil), "stream.StreamRequest")
	proto.RegisterType((*StreamReply)(nil), "stream.StreamReply")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0x4d, 0x37, 0x86, 0xbd, 0xd1, 0x81, 0x57, 0x84, 0x2a, 0x2a, 0x25, 0x4f, 0x7d, 0x31,
	0xca, 0xfc, 0x07, 0x05, 0xc1, 0xbd, 0x49, 0xe6, 0x93, 0x4f, 0x66, 0xcb, 0x45, 0x65, 0xa9, 0x89,
	0x4d, 0x15, 0xf2, 0xef, 0x85, 0xb4, 0xc3, 0xa9, 0x7b, 0xbb, 0xf9, 0xce, 0xe1, 0x9c, 0x43, 0xe0,
	0x20, 0x74, 0x2d, 0xe9, 0x46, 0xfa, 0xd6, 0x75, 0x0e, 0x27, 0xfd, 0x4b, 0x10, 0x1c, 0x2d, 0xd2,
	0xa5, 0xe8, 0xe3, 0x93, 0x42, 0x57, 0x3b, 0x13, 0xf1, 0x1c, 0xf2, 0x86, 0x42, 0xd0, 0x2f, 0x34,
	0x37, 0x05, 0x2b, 0x59, 0x35, 0x52, 0x3f, 0x00, 0x2f, 0x01, 0x14, 0xad, 0xe8, 0xed, 0x8b, 0xda,
	0xb9, 0x29, 0xb2, 0x24, 0x6f, 0x11, 0x44, 0x18, 0xbf, 0xeb, 0x86, 0x8a, 0x51, 0xc9, 0xaa, 0x5c,
	0xa5, 0x5b, 0x3c, 0xc3, 0xe1, 0xaf, 0x1a, 0x2c, 0x81, 0x0f, 0x89, 0x8f, 0xd1, 0xd3, 0x50, 0xb2,
	0x8d, 0xf0, 0x0a, 0xc6, 0x4b, 0x67, 0x62, 0x2a, 0xe0, 0xb3, 0x53, 0x39, 0xcc, 0xff, 0xb7, 0x56,
	0x25, 0x9b, 0xb8, 0x00, 0xbe, 0x91, 0xbc, 0x8d, 0x38, 0x85, 0xcc, 0xad, 0x53, 0xec, 0xbe, 0xca,
	0xdc, 0x7a, 0xf6, 0x00, 0x70, 0xb7, 0x7a, 0x75, 0xbd, 0x05, 0x6b, 0x98, 0x2e, 0x74, 0xbc, 0x27,
	0x6b, 0x37, 0xe4, 0x64, 0x67, 0xfe, 0xd9, 0xf1, 0x5f, 0xec, 0x6d, 0x14, 0x7b, 0x15, 0xbb, 0x61,
	0x35, 0x7f, 0xca, 0xa5, 0xbc, 0xee, 0xe5, 0xe5, 0x24, 0xfd, 0xea, 0xed, 0x77, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x24, 0x17, 0x78, 0x48, 0x65, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoStreamClient is the client API for EchoStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoStreamClient interface {
	SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (EchoStream_SayHelloStreamClient, error)
}

type echoStreamClient struct {
	cc *grpc.ClientConn
}

func NewEchoStreamClient(cc *grpc.ClientConn) EchoStreamClient {
	return &echoStreamClient{cc}
}

func (c *echoStreamClient) SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (EchoStream_SayHelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EchoStream_serviceDesc.Streams[0], "/stream.EchoStream/SayHelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoStreamSayHelloStreamClient{stream}
	return x, nil
}

type EchoStream_SayHelloStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type echoStreamSayHelloStreamClient struct {
	grpc.ClientStream
}

func (x *echoStreamSayHelloStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoStreamSayHelloStreamClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoStreamServer is the server API for EchoStream service.
type EchoStreamServer interface {
	SayHelloStream(EchoStream_SayHelloStreamServer) error
}

func RegisterEchoStreamServer(s *grpc.Server, srv EchoStreamServer) {
	s.RegisterService(&_EchoStream_serviceDesc, srv)
}

func _EchoStream_SayHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoStreamServer).SayHelloStream(&echoStreamSayHelloStreamServer{stream})
}

type EchoStream_SayHelloStreamServer interface {
	Send(*StreamReply) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type echoStreamSayHelloStreamServer struct {
	grpc.ServerStream
}

func (x *echoStreamSayHelloStreamServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoStreamSayHelloStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EchoStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.EchoStream",
	HandlerType: (*EchoStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStream",
			Handler:       _EchoStream_SayHelloStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
